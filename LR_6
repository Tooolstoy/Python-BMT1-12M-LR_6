#модули, которые нам понадобятся
import matplotlib
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import wfdb
import heartpy as hp
from scipy.signal import find_peaks
class Experiment:
    
    def __init__(self, data):
        self.data = data
        self.path_signal = data['signal']
        self.date = data['date']
        self.parameters = data['parameters']
        self.signal = self.load_signal()

    def load_signal(self):
        data = pd.read_csv(self.path_signal)
        signal = data['MLII']
        return signal
    
    def det_date(self):
        return self.date
    
    def get_signal_length(self):
        return len(self.signal)
    
    def plot_signal(self):
        plt.figure(figsize=(12, 8))
        signal_to_plot = self.signal 
        plt.plot(signal_to_plot)
        plt.show()
    
    def _signal_filtration(self, signal, filtration_perams):
        filtered_signal = hp.filter_signal(signal, **filtration_perams)
        return filtered_signal
    
    def _signal_find_peaks(self, signal, find_peaks_parametres):
        peaks, _ = find_peaks(filtered, **find_peaks_parametres)
        return peaks
    
    def _calculate_RR_intervals(self):
        filtration_params = self.parameters['filtration']
        find_peaks_params = self.parameters['find_peaks']
        filtered_signal = self._signal_filtration(self.signal, filtration_params)
        peaks = self._signal_find_peaks(filtered_signal, find_peaks_params)
        rr_intervals = np.diff(peaks) / filtration_params['sample_rate']
        return rr_intervals
    
    def get_RR_statistics(self):
        rr_intervals = self._calculate_RR_intervals()
        
        rr_stats = {
            'mean': np.mean(rr_intervals),
            'std': np.std(rr_intervals),
            'min': np.min(rr_intervals),
            'max': np.max(rr_intervals)
        }
        self.plot_signal()
        return rr_stats
data = {
    'date': '2023-01-05',
    'signal': 'ecg.csv',
    'parameters': {
        'filtration': {
            'cutoff': [0.75, 3.5],
            'sample_rate': 100,
            'order': 3,
            'filtertype': 'bandpass'
        },
        'find_peaks': {
            'height': 20 
        }
    }
}
ecg = Experiment(data)
signal = ecg.load_signal()
rr_statistics = ecg.get_RR_statistics()
print(rr_statistics)

{'mean': 2.8862318840579713, 'std': 0.3107732359789018, 'min': 0.66, 'max': 3.58}
Задача ** "Минигольф"
в папке на githab
